#!/bin/bash

# Copyright (C) 2024 Steve Jeong <steve@how2flow.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>

############################
# Kernel CONFIG for FTRACE #
############################

# CONFIG_FTRACE=y
# CONFIG_DYNAMIC_FTRACE=y
# CONFIG_FUNCTION_TRACER=y
# CONFIG_FUNCTION_GRAPH_TRACER=y
# CONFIG_IRQSOFF_TRACER=y
# CONFIG_SCHED_TRACER=y
# CONFIG_FUNCTION_PROFILER=y
# CONFIG_STACK_TRACER=y
# CONFIG_TRACER_SNAPSHOT=y

set -e

DEFAULT=$(pwd -P)
DUMMY=kernel_init
PREFIX=/sys/kernel/debug/tracing

query_events() {
  local ans
  local events

  while true; do
    cd ${PREFIX}/events
    read -e -p "Enable some kernel events? ${PREFIX}/events/: " events
    if [ -z "${events}" ]; then
      echo "Move on without setting the event ..."
    else
      for evt in ${events}; do
        if [ -f ${PREFIX}/events/${evt} ]; then
          echo 1 > ${PREFIX}/events/${evt}
        else
          echo "${evt}: Invalid events ..."
          events=EVAL
          break
        fi
      done
    fi

    if [ "x${events}" = "xEVAL" ]; then
      echo ""
      echo "Reset the event all over again ..."
      continue
    fi

    echo ""
    echo "Set events: ${events}"
    read -r -p "Have you finished setting up the evnets ([Y]es/[n]o) ? : " ans
    case ${ans} in
      [Nn][Oo]|[Nn])
        echo ""
        continue
        ;;
      *)
        cd ${DEFAULT}
        echo "Setup events ... OK"
        echo "events: ${events}"
        break
        ;;
    esac
  done
}

query_functions() {
  local ans
  local filters
  local flag
  local functions

  while true; do
    read -r -p "Add the kernel function filter (e.g. hrtimer_interrupt): " functions
    if [ -z "${functions}" ]; then
      echo ""
      echo "You have not set up a filter, so set up a dummy filter ..."
      filters=${DUMMY}
    else
      for f in ${functions}; do
        echo ""
        echo "Search function filter: ${f} ..."
        if [[ ${f} =~ \* ]]; then
          flag="-c"
        else
          flag="-c -Fx"
        fi

        if [ $(cat ${PREFIX}/available_filter_functions | cut -d " " -f 1 | grep ${flag} ${f}) -gt 0 ]; then
          filters+="${f} "
          echo "${f}: Add functions filter!"
          echo ""
        else
          echo "${f}: Invalid Function Filter!"
          echo ""
          continue
        fi
      done
    fi

    echo ${filters} > ${PREFIX}/set_ftrace_filter

    echo ""
    echo "Set filters: ${filters}"
    read -r -p "Have you finished setting up the filter ([Y]es/[n]o) ? : " ans
    case ${ans} in
      [Nn][Oo]|[Nn])
        echo ""
        continue
        ;;
      *)
        echo "Setup filters ... OK"
        echo "filters: ${filters}"
        break
        ;;
    esac
  done
}

init_ftrace() {
  local init

  if [ ! -d ${PREFIX} ]; then
    echo "Please add configs of ftrace"
    echo ""
    echo "CONFIG_FTRACE=y"
    echo "CONFIG_DYNAMIC_FTRACE=y"
    echo "CONFIG_FUNCTION_TRACER=y"
    echo "CONFIG_FUNCTION_GRAPH_TRACER=y"
    echo "CONFIG_IRQSOFF_TRACER=y"
    echo "CONFIG_SCHED_TRACER=y"
    echo "CONFIG_FUNCTION_PROFILER=y"
    echo "CONFIG_STACK_TRACER=y"
    echo "CONFIG_TRACER_SNAPSHOT=y"
    exit 1
  fi

  # Prepare ftrace
  echo 0 > ${PREFIX}/tracing_on
  cat ${PREFIX}/trace_pipe > /dev/null

  # Init default options
  echo 1 > ${PREFIX}/options/func_stack_trace
  echo 1 > ${PREFIX}/options/sym-offset
  sleep .5
  echo "Init defualt options ... OK"
}

get_ftrace() {
  echo "Finish filtering ... OK"
  echo 0 > ${PREFIX}/events/enable
  echo "Disable events ... OK"
  sleep 1
  echo 0 > ${PREFIX}/tracing_on
  echo "Trace off for get logs ... OK"
  sleep 1

  # get ftrace log
  sleep 2
  cp ${PREFIX}/trace ./trace.log
  chmod +r ./trace.log
  echo ""
}

set_ftrace() {
  local ans
  local tracer

  # Set current tracer
  read -r -p "Init current tracer [[N]op|[F]unction|[G]function_graph] (default: nop) ? : " init
  case ${init} in
    [Nn][Oo][Pp]|[Nn])
      tracer=nop
      ;;
    [Ff][Uu][Nn][Cc][Tt][Ii][Oo][Nn]|[Ff])
      tracer=function
      ;;
    [Ff][Uu][Nn][Cc][Tt][Ii][Oo][Nn]_[Gg][Rr][Aa][Pp][Hh]|[Gg])
      tracer=function_graph
      ;;
    *)
      tracer=nop
      ;;
  esac
  case ${tracer} in
    nop|function)
      echo ${tracer} > ${PREFIX}/current_tracer
      ;;
    function_graph)
      echo ${tracer} > ${PREFIX}/current_tracer
        while true; do
          read -r -p "Set function depth [0 - 9] : " depth
            if [[ ${depth} =~ ^[0-9]$ ]]; then
              echo "${depth}" > "${PREFIX}/max_graph_depth"
              break
            else
              echo "Invalid depth. Please enter a number between 0 and 9."
            fi
        done
      ;;
    *)
      echo function > ${PREFIX}/current_tracer
      ;;
  esac
  echo "Set current_tracer ... OK"

  # Query things
  echo ""
  echo "=== [Set events] ==="
  read -r -p "Do you want to set kernel event option [[y]es/[N]o] ? : " ans
  case ${ans} in
    [Yy]|[Yy][Ee][Ss])
      query_events
      ;;
    *)
      echo "Do not set any events ..."
      sleep 1
      ;;
  esac
  echo ""
  if [ $(cat ${PREFIX}/current_tracer) != 'nop' ]; then
    echo "=== [Set function filter] ==="
    read -r -p "Do you want to set kernel function filter [[y]es/[N]o] ? : " ans
    case ${ans} in
      [Yy]|[Yy][Ee][Ss])
        query_functions
        ;;
      *)
        echo "You have not set up a filter, so set up a dummy filter ..."
        echo ${DUMMY} > ${PREFIX}/set_ftrace_filter
        sleep 1
        ;;
    esac
  fi
  echo ""

  # Ftrace on
  echo 1 > ${PREFIX}/events/enable
  echo "Enable events ..."
  echo ""
  sleep 1
  echo 1 > ${PREFIX}/tracing_on
  echo "Trace on ..."
  echo ""
  sleep 1
}

# EUID
if [ $EUID -ne 0 ]; then
  echo "please run as 'root'"
  exit 1
fi

echo " === [Initialize Ftrace] ==="
init_ftrace
echo ""

read -r -p "How would you use ftrace ([G]et/[S]et) ?: " OPTION
echo ""
case ${OPTION} in
  [Ss][Ee][Tt]|[Ss])
    echo "=== [Set Ftrace] ==="
    set_ftrace
    echo ""
    ;;
  *)
    echo "=== [Get Ftrace] ==="
    get_ftrace
    echo ""
    ;;
esac

# vim: ft=sh ts=2 sw=2 sts=2 et
